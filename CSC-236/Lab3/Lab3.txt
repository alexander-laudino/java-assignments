
CSC236 Data Structures in Java
Lab 3

The Billboard Hot 100 is the music industry standard record chart in the United States for songs, published weekly by Billboard magazine. Chart rankings are based on sales (physical and digital), radio play, and online streaming in the United States. A new chart is compiled and officially released to the public by Billboard on Tuesdays but post-dated to the following Saturday. The first number one song of the Billboard Hot 100 was "Poor Little Fool" by Ricky Nelson, on August 4, 1958. As of the issue for the week ending on March 26, 2022, the Billboard Hot 100 has had 1,134 different number one entries. The chart's current number-one song is "Heat Waves" by Glass Animals.

You will design, implement, and test a program which allows the user to search a subset of the songs which have appeared on the Billboard Hot 100 chart list. To make the data file manageable, the data set will only contain those songs that appeared on the chart between January 2018 and May 2021.
Input

The file named BillboardHot100.csv contains the data set. You can download it from canvas in Files in the Lab 3 folder. Each line of the file contains the information for a song, which includes: Billboard Chart URL, WeekID, Song Name, Performer Name, SongID (Concatenation of song & performer), Instance (This is used to separate breaks on the chart for a given song. Example, an instance of 6 tells you that this is the sixth time this song has appeared on the chart.), Peak Position (as of the corresponding week) and Weeks on Chart (as of the corresponding week).

A .csv (comma separated values) file is a standard type of data file in which each line contains a "record" (which describes one entity), and each record contains the same "fields", each of which contains one piece of data about a single entity. For example, in our file each record describes a song, and the fields (Billboard URL, weekID, song name, etc.) contain all of the info about that song. The fields on each line of the file are separated by commas. If you open a .csv file in excel it will display like a spreadsheet; if you open a .csv file in textpad you will see the fields separated by commas.

The difference between a .csv file and the data files we usually use is the delimeter used to separate the fields. Normally we use blanks and newlines to separate our data. In a .csv file the fields are separated with commas. There are Java methods, such as the useDelimiter method of the Scanner class, that can help us read this type of file. However, there is an additional complication in the Billboard 100 data file. Some of the song names and some of the performer names include commas. It is essential to distiguish between the commas within these fields and the commas that separate the fields. Therefore, instead of using useDelimeter, we will use the split method in the String class. Both useDelimeter and split use a regular expression to separate the fields on the line. A regular expression is a string that is used to search for specific characters or patterns in text.

Look up the split method of the String class. This method splits a String into "tokens" (fields), using a regular expression to define how the fields are separated. You are welcome to read about regular expressions, but the regular expression needed is very complex so it is given below. To read the input file for each line of the file:

    Read a line.
    Call the split method, for the first parm use the delimeter: ",(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)", for the second parm use -1.
    Each call to split returns an array of Strings; each String in the array is a field from that line of the file. The order of the elements in the array is the same as the order of the fields on the input line.
    The int fields (instance, peak position, and weeks on chart) will be Strings, and must be converted to to int.
    Pass the fields to the Song constructor to create the Song for that line of the file.

Output

The input file is very large, even though it only covers the period from January 2018 to May 2021. Since there is so much data in the output, send the output to a file.

Create a Scanner for the output file in the client code. Pass this Scanner to the Billboard100 methods, so that the methods can put their output into the file. The Billboard100 methods should print a description in the output file before printing the data.

Print a message on the screen to inform the user when data has been written to the output file.
Song Class

Create a Song class with the following information: Billboard Chart URL (String), WeekID (Date), Song Name (String), Performer Name (String), SongID (String), Instance(Integer), Peak Position (Integer) and Weeks on Chart (Integer).

Song will need an equals method and it will need to implement the Comparable Interface and have a compareTo method that will be able to compare Song objects; Songs will be ordered by SongID. Make sure that Songs display in a nicely formatted, readable manner. Include any other methods necessary to complete this assignment, however, only include methods that are needed. Do not create sets and gets for all fields; only create them if needed. Create methods like boolean performedBy(String performerName), which returns true if the parm matches the Performer Name field. This is better than creating a get method for the performer and then doing the comparison in the client code.
Date Class

Create a Date class with the following information: month, day, and year (all ints). Date needs an equals method and it will need to implement the Comparable Interface and have a compareTo method that will be able to compare Date objects appropriately. A date that occurs earlier should be less that a date that occurs later. Include any other methods necessary to complete this assignment, however, only include methods that are needed. Do not create sets and gets for all fields; only create them if needed. As with the Song class, try to create methods that do more of the work.
Billboard100 Class

The class Billboard100 will hold the information about all the songs on the BillboardHot100 List. A Billboard100 object will contain a SortedArrayCollection of Song objects. This class is covered in Chapter 5 of your text. The BillboardHot100 methods will store the Songs in the SortedArrayCollection and use the SortedArrayCollection methods to access the Songs. You will need to add an Iterator to the SortedArrayCollection class. Add it as an anonymous inner class.

The class Billboard100 will need methods for the following:

    Print all Billboard Hot 100 Songs in the List (use the natural order).
    Print all songs in the list that have been on the chart for more than 12 weeks.
    Display all songs in a specific week: Prompt the user to enter a month, day and year (remember that the week starts on a Saturday), then display all songs that made the chart that week.
    Search for a performer: Prompt the user for a string, then display all songs in the list that match the performers name (regardless of case).
    Search for a song name: Prompt the user for a string, then display all songs in the list that match the songs name (regardless of case).
    Print all the songs in the list with an Instance greater than 1.
    Print all the songs in the list whose peak position is 1.
    Print all Songs in order by WeekID (increasing order). This is a date. Hint: need to add a comparator to the Song class as this is not the natural order.
    Print all Songs in alphabetical order by Song Name. Hint: need to add a comparator to the Song class as this is not the natural order.
    Print all songs in alphabetical order by Performer Name. Hint: need to add a comparator to the Song class as this is not the natural order.

Remember that all of these methods should print to the output file.
Client Code

Your main program will create a Billboard 100 object. The data for the Songs will be read from a file. Your driver (client) program should read the input file and store the data in your Billboard 100 object. The program will input the data set and construct a list of songs. If the list of songs cannot be constructed, the program will display an appropriate error message and halt (Use a try/catch). Then main should give the user a menu so they can perform all the tasks stated above. Let the user continue until they want to quit. If the user gives an invalid response to the menu, give an error message, and continue. Print an error message if no songs match a given request.

Don't put all your client code in main. Create some other functions so main doesn't get too large.

Email Me | Office Hours | My Home Page | Department Home | MCC Home Page

Â© Copyright Emmi Schatz 2022
