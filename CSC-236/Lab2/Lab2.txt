CSC236 Data Structures in Java
Lab 2

In this lab you will write a program to print a listing of files and folders.

Your program will read one String from the keyboard: the path to a directory. Let's call this directory the starting directory. Use the File class (java.io.File) to print the name of the directory on the screen. Print the name of each file and directory in the starting directory. For every directory contained in the starting directory, print the directory name and each file and directory contained within it.

Indent 3 spaces when you print the contents of a directory. This means that each time you print the contents of a directory, the name of each contained file or directory should be indented 3 spaces more than the name of the directory itself.

You will need to use most of the following methods from the java.io.File class:

    The constructor with one parm which is a String containing the full path to the file/directory.
    The constructor with two parms; the first is the File object for the parent directory and the second is a String containing the name of the child directory.
    The isFile() method returns true if the File object is a file
    The isDirectory() method returns true if the File object is a directory
    The list() method of the File class returns an array of Strings which contains the names of all files and directories contained in the directory represented by the object.

Your program will print the name of the starting directory, then use the list() method to get an array containing the names of everything in the starting directory. Loop through this array. If an array element is a file, print the name of the file. If an array element is a directory, you need to print the name of the directory, and then print everything contained in the directory (indented three spaces).

When you finish printing all of the files and directories in a "contained" directory, you need to return to the parent directory to finish printing its contents. That means that you need a way to "back up" to the parent. We will use a stack for this. Before you start processing a "contained" directory, you need to stack information about the parent directory, to save that info for when you are ready to continue processing the parent. When you are finished printing the contents of a directory, pop the parent off the stack and continue printing the contents of the parent. Pushing the parent onto the stack each time we find a contained directory will allow us to process directory structures of any depth, as long as our stack is large enough to hold all of the parents.

Your program should use loops only. No recursion!
Notes

    Create a directory on the root your C: drive to test your program. Do not test using a directory within Documents. Start with a directory that contains a few files. When this is working, create some subdirectories. Make sure you test a directory structure with a few levels so you can check whether everything prints and make sure your indenting is correct.
    The order in which the files and directories print doesn't matter. The list() method will return an array containing the names of all files and directories in the parent directory; print everything in that array.
    You need to use a stack to hold the directories along the path from your starting directory to the current directory you are printing, so that when you finish the current directory you can go back to the parent. As you go through the files in the current directory, when you find a child directory you need to stack the current directory and begin processing the child directory. When all files and folders from the child have been printed, pop the parent from the stack and continue processing it.
    Think about the information you need to put in the stack so that you can come back to the directory and continue printing the rest of its contents. You cannot just stack the name of the parent. You need the variables that will allow you to continue printing the contents of the parent. Make a class called DirInfo. This class will contain those items (the name of the directory, and ...). Your stack will hold DirInfo objects.
    I suggest that you stack the starting directory, then enter a loop which pops a directory and processes it. This loop should stop when the stack in empty.
    YOU MUST USE THE STACK CLASSES FROM OUR TEXTBOOK. IF YOU DO NOT USE THESE CLASSES YOU WILL RECEIVE A ZERO FOR THE LAB. The stack classes are posted on canvas in Files in the Lab 2 directory.